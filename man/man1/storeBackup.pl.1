.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STOREBACKUP 1"
.TH STOREBACKUP 1 "2014-04-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
storeBackup.pl \- fancy compressing managing checksumming
                 hard\-linking deduplicating 'cp \-ua'
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program copies trees to another location. Every file copied is
potentially compressed (see \-\-exceptSuffix). The backups after
the first backup will compare the files with an md5 checksum
with the last stored version. If they are equal, it will only make an
hard link to it. It will also check mtime, ctime and size to recognize
idential files in older backups very fast.
It can also backup big image files fast and efficiently on a per block
basis (data deduplication).
.PP
You can overwrite options in the configuration file on the command line.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        storeBackup.pl \-\-help
\&or    
\&        storeBackup.pl \-g configFile
\&or
\&        storeBackup.pl [\-f configFile] [\-s sourceDir]
\&              [\-b backupDirectory] [\-S series] [\-\-checkCompr] [\-\-print]
\&              [\-T tmpdir] [\-L lockFile] [\-\-unlockBeforeDel] 
\&              [\-\-exceptDirs dir1] [\-\-contExceptDirsErr]
\&              [\-\-includeDirs dir1]
\&              [\-\-exceptRule rule] [\-\-includeRule rule]
\&              [\-\-exceptTypes types]
\&              [\-\-specialTypeArchiver archiver [\-\-archiveTypes types]]
\&              [\-\-cpIsGnu] [\-\-linkSymlinks]
\&              [\-\-precommand job] [\-\-postcommand job]
\&              [\-\-followLinks depth] [\-\-stayInFileSystem] [\-\-highLatency]
\&              [\-\-ignorePerms] [\-\-lateLinks [\-\-lateCompress]] [\-\-autorepair]
\&              [\-\-checkBlocksSuffix suffix] [\-\-checkBlocksMinSize size]
\&              [\-\-checkBlocksBS] [\-\-checkBlocksCompr check|yes|no]
\&              [\-\-checkBlocksParallel] [\-\-queueBlock]
\&              [\-\-checkBlocksRule0 rule [\-\-checkBlocksBS0 size]
\&               [\-\-checkBlocksCompr0 key] [\-\-checkBlocksRead0 filter]
\&               [\-\-checkBlocksParallel0]]
\&              [\-\-checkBlocksRule1 rule [\-\-checkBlocksBS1 size]
\&               [\-\-checkBlocksCompr1 key] [\-\-checkBlocksRead1 filter]
\&               [\-\-checkBlocksParallel1]]
\&              [\-\-checkBlocksRule2 rule [\-\-checkBlocksBS2 size]
\&               [\-\-checkBlocksCompr2 kdey] [\-\-checkBlocksRead2 filter]
\&               [\-\-checkBlocksParallel2]]
\&              [\-\-checkBlocksRule3 rule [\-\-checkBlocksBS3 size]
\&               [\-\-checkBlocksCompr3 key] [\-\-checkBlocksRead3 filter]
\&               [\-\-checkBlocksParallel3]]
\&              [\-\-checkBlocksRule4 rule [\-\-checkBlocksBS4 size]
\&               [\-\-checkBlocksCompr4 key] [\-\-checkBlocksRead4 filter]
\&               [\-\-checkBlocksParallel4]]
\&              [\-\-checkDevices0 list [\-\-checkDevicesDir0]
\&               [\-\-checkDevicesBS0] [checkDevicesCompr0 key]
\&               [\-\-checkDevicesParallel0]]
\&              [\-\-checkDevices1 list [\-\-checkDevicesDir1]
\&               [\-\-checkDevicesBS1] [checkDevicesCompr1 key]
\&               [\-\-checkDevicesParallel1]]
\&              [\-\-checkDevices2 list [\-\-checkDevicesDir2]
\&               [\-\-checkDevicesBS2] [checkDevicesCompr2 key]
\&               [\-\-checkDevicesParallel2]]
\&              [\-\-checkDevices3 list [\-\-checkDevicesDir3]
\&               [\-\-checkDevicesBS3] [checkDevicesCompr3 key]
\&               [\-\-checkDevicesParallel3]]
\&              [\-\-checkDevices4 list [\-\-checkDevicesDir4]
\&               [\-\-checkDevicesBS4] [checkDevicesCompr4 key]
\&               [\-\-checkDevicesParallel1]]
\&              [\-\-saveRAM] [\-c compress] [\-u uncompress] [\-p postfix]
\&              [\-\-noCompress number] [\-\-queueCompress number]
\&              [\-\-noCopy number] [\-\-queueCopy number]
\&              [\-\-withUserGroupStat] [\-\-userGroupStatFile filename]
\&              [\-\-exceptSuffix suffixes] [\-\-addExceptSuffix suffixes]
\&              [\-\-compressSuffix] [\-\-minCompressSize size] [\-\-comprRule]
\&              [\-\-doNotCompressMD5File] [\-\-chmodMD5File] [\-v]
\&              [\-d level] [\-\-progressReport number[,timeframe]]
\&              [\-\-ignoreReadError]
\&              [\-\-suppressWarning key] [\-\-linkToRecent name]
\&              [\-\-doNotDelete] [\-\-deleteNotFinishedDirs]
\&              [\-\-resetAtime] [\-\-keepAll timePeriod] [\-\-keepWeekday entry]
\&              [[\-\-keepFirstOfYear] [\-\-keepLastOfYear]
\&               [\-\-keepFirstOfMonth] [\-\-keepLastOfMonth]
\&               [\-\-firstDayOfWeek day] [\-\-keepFirstOfWeek]
\&               [\-\-keepLastOfWeek] [\-\-keepDuplicate] [\-\-keepMinNumber]
\&               [\-\-keepMaxNumber]
\&                | [\-\-keepRelative] ]
\&              [\-l logFile
\&               [\-\-plusLogStdout] [\-\-suppressTime] [\-m maxFilelen]
\&               [[\-n noOfOldFiles] | [\-\-saveLogs]]
\&               [\-\-compressWith compressprog]]
\&              [\-\-logInBackupDir [\-\-compressLogInBackupDir]
\&               [\-\-logInBackupDirFileName logFile]]
\&              [otherBackupSeries ...]
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
.Vb 1
\&    show this help
.Ve
.IP "\fB\-\-generate\fR, \fB\-g\fR" 8
.IX Item "--generate, -g"
.Vb 1
\&    generate a template of the configuration file
.Ve
.IP "\fB\-\-checkCompr\fR, \fB\-C\fR" 8
.IX Item "--checkCompr, -C"
.Vb 4
\&    check compression for all files bigger than 1k to check if
\&    it makes sense to compress them
\&    overwrites options
\&        exceptSuffix, addExceptSuffix, minCompressSize, comprRule
.Ve
.IP "\fB\-\-print\fR" 8
.IX Item "--print"
.Vb 2
\&    print configuration read from configuration file
\&    or command line and stop
.Ve
.IP "\fB\-\-file\fR, \fB\-f\fR" 8
.IX Item "--file, -f"
.Vb 2
\&    configuration file (instead of or additionally to options
\&    on command line)
.Ve
.IP "\fB\-\-sourceDir\fR, \fB\-s\fR" 8
.IX Item "--sourceDir, -s"
.Vb 1
\&    source directory (must exist)
.Ve
.IP "\fB\-\-backupDir\fR, \fB\-b\fR" 8
.IX Item "--backupDir, -b"
.Vb 1
\&    top level directory of all backups (must exist)
.Ve
.IP "\fB\-\-series\fR, \fB\-S\fR" 8
.IX Item "--series, -S"
.Vb 2
\&    series directory, default is \*(Aqdefault\*(Aq
\&    relative path from backupDir
.Ve
.IP "\fB\-\-tmpdir\fR, \fB\-T\fR" 8
.IX Item "--tmpdir, -T"
.Vb 1
\&    directory for temporary files, default is </tmp>
.Ve
.IP "\fB\-\-lockFile\fR, \fB\-L\fR" 8
.IX Item "--lockFile, -L"
.Vb 6
\&    lock file, if exists, new instances will finish if an old
\&    is already running, default is $lockFile
\&    this type of lock files does not work across multiple servers
\&    and is not designed to separate storeBackup.pl and
\&    storeBackupUpdateBackup.pl or any other storeBackup
\&    process in a separate PID space
.Ve
.IP "\fB\-\-unlockBeforeDel\fR" 8
.IX Item "--unlockBeforeDel"
.Vb 3
\&    remove the lock file before deleting old backups
\&    default is to delete the lock file after removing old
\&    backups
.Ve
.IP "\fB\-\-exceptDirs\fR, \fB\-e\fR" 8
.IX Item "--exceptDirs, -e"
.Vb 5
\&    directories to except from backing up (relative path),
\&    wildcards are possible and should be quoted to avoid
\&    replacements by the shell
\&    use this parameter multiple times for multiple
\&    directories
.Ve
.IP "\fB\-\-contExceptDirsErr\fR" 8
.IX Item "--contExceptDirsErr"
.Vb 2
\&    continue if one or more of the exceptional directories
\&    do not exist (default is to stop processing)
.Ve
.IP "\fB\-\-includeDirs\fR, \fB\-i\fR" 8
.IX Item "--includeDirs, -i"
.Vb 3
\&    directories to include in the backup (relative path),
\&    wildcards are possible and have to be quoted
\&    use this parameter multiple times for multiple directories
.Ve
.IP "\fB\-\-exceptRule\fR" 8
.IX Item "--exceptRule"
.Vb 2
\&    Files to exclude from backing up.
\&    see README: \*(Aqincluding / excluding files and directories\*(Aq
.Ve
.IP "\fB\-\-includeRule\fR" 8
.IX Item "--includeRule"
.Vb 2
\&    Files to include in the backug up \- like exceptRule
\&    see README: \*(Aqincluding / excluding files and directories\*(Aq
.Ve
.IP "\fB\-\-writeExcludeLog\fR" 8
.IX Item "--writeExcludeLog"
.Vb 2
\&    write a file name .storeBackup.notSaved.bz2 with the names
\&    of all skipped files
.Ve
.IP "\fB\-\-exceptTypes\fR" 8
.IX Item "--exceptTypes"
.Vb 8
\&    do not save the specified type of files, allowed: Sbcfpl
\&        S \- file is a socket
\&        b \- file is a block special file
\&        c \- file is a character special file
\&        f \- file is a plain file
\&        p \- file is a named pipe
\&        l \- file is a symbolic link
\&        Sbc can only be saved when using option [cpIsGnu]
.Ve
.IP "\fB\-\-archiveTypes\fR" 8
.IX Item "--archiveTypes"
.Vb 10
\&    save the specified type of files in an archive instead saving
\&    them directly in the file system
\&    use this if you want to backup those file types but your target
\&    file or transport (eg. sshfs or non gnu\-cp) system does not support
\&    those types of files
\&        S \- file is a socket
\&        b \- file is a block special file
\&        c \- file is a character special file
\&        p \- file is a named pipe
\&    you also have to set \-\-specialTypeArchiver when using this option
.Ve
.IP "\fB\-\-specialTypeArchiver\fR" 8
.IX Item "--specialTypeArchiver"
.Vb 3
\&    possible values are \*(Aqcpio\*(Aq or \*(Aqtar\*(Aq. default is \*(Aqcpio\*(Aq
\&    tar is not able to archive sockets
\&    cpio is not part of the actual posix standard any more
.Ve
.IP "\fB\-\-cpIsGnu\fR" 8
.IX Item "--cpIsGnu"
.Vb 3
\&    Activate this option if your systems cp is a full\-featured
\&    GNU version. In this case you will be able to also backup
\&    several special file types like sockets.
.Ve
.IP "\fB\-\-linkSymlinks\fR" 8
.IX Item "--linkSymlinks"
.Vb 1
\&    hard link identical symlinks
.Ve
.IP "\fB\-\-precommand\fR" 8
.IX Item "--precommand"
.Vb 5
\&    exec job before starting the backup, checks lockFile (\-L)
\&    before starting (e.g. can be used for rsync)
\&    stops execution if job returns exit status != 0
\&    This parameter is parsed like a line in the configuration
\&    file and normally has to be quoted.
.Ve
.IP "\fB\-\-postcommand\fR" 8
.IX Item "--postcommand"
.Vb 4
\&    exec job after finishing the backup, but before erasing of
\&    old backups  reports if job returns exit status != 0
\&    This parameter is parsed like a line in the configuration
\&    file and normally has to be quoted.
.Ve
.IP "\fB\-\-followLinks\fR" 8
.IX Item "--followLinks"
.Vb 2
\&    follow symbolic links like directories up to depth
\&    default = 0 \-> do not follow links
.Ve
.IP "\fB\-\-stayInFileSystem\fR" 8
.IX Item "--stayInFileSystem"
.Vb 2
\&    only store the contents of file systems named by
\&    \-\-sourceDir and symlinked via \-\-followLinks
.Ve
.IP "\fB\-\-highLatency\fR" 8
.IX Item "--highLatency"
.Vb 2
\&    use this for a very high latency line (eg. vpn over
\&    the internet) for better parallelization
.Ve
.IP "\fB\-\-ignorePerms\fR" 8
.IX Item "--ignorePerms"
.Vb 4
\&    If this option choosen, files will not necessarily have
\&    the same permissions and owner as the originals. This
\&    speeds up backups on network drives a lot. Recovery with
\&    storeBackupRecover.pl will restore them correctly.
.Ve
.IP "\fB\-\-lateLinks\fR" 8
.IX Item "--lateLinks"
.Vb 6
\&    do *not* write hard links to existing files in the backup
\&    during the backup
\&    you have to call the program storeBackupWriteLateLink.pl
\&    later on your server if you set this flag to \*(Aqyes\*(Aq
\&    you have to run storeBackupUpdateBackup.pl later \- see
\&    description for that program
.Ve
.IP "\fB\-\-lateCompress\fR" 8
.IX Item "--lateCompress"
.Vb 3
\&    only in combination with \-\-lateLinks
\&    compression from files >= minCompressSize will be done
\&    later, the file is (temporarily) copied into the backup
.Ve
.IP "\fB\-\-autorepair\fR, \fB\-a\fR" 8
.IX Item "--autorepair, -a"
.Vb 2
\&    repair simple inconsistencies (from lateLinks) automatically
\&    without requesting the action
.Ve
.IP "\fB\-\-checkBlocksSuffix\fR" 8
.IX Item "--checkBlocksSuffix"
.Vb 4
\&    Files with suffix for which storeBackup will make an md5
\&    check on blocks of that file. Executed after
\&    \-\-checkBlocksRule(n)
\&    This option can be repeated multiple times
.Ve
.IP "\fB\-\-checkBlocksMinSize\fR" 8
.IX Item "--checkBlocksMinSize"
.Vb 2
\&    Only check files specified in \-\-checkBlocksSuffix if there
\&    file size is at least this value, default is 100M
.Ve
.IP "\fB\-\-checkBlocksBS\fR" 8
.IX Item "--checkBlocksBS"
.Vb 2
\&    Block size for files specified with \-\-checkBlocksSuffix
\&    Default is $checkBlocksBSdefault (1 megabyte)
.Ve
.IP "\fB\-\-checkBlocksCompr\fR" 8
.IX Item "--checkBlocksCompr"
.Vb 3
\&    if set, the blocks generated due to checkBlocksSuffix
\&    are compressed, default is \*(Aqno\*(Aq
\&    if set to \*(Aqcheck\*(Aq, tries to estimate if compression helps
.Ve
.IP "\fB\-\-checkBlocksParallel\fR" 8
.IX Item "--checkBlocksParallel"
.Vb 3
\&    Read files specified here in parallel to "normal" ones.
\&    This only makes sense if they are on a different disk.
\&    Default value is \*(Aqno\*(Aq
.Ve
.IP "\fB\-\-queueBlock\fR" 8
.IX Item "--queueBlock"
.Vb 2
\&    length of queue to store files before block checking,
\&    default = $queueBlock
.Ve
.IP "\fB\-\-checkBlocksRule0\fR" 8
.IX Item "--checkBlocksRule0"
.Vb 2
\&    Files for which storeBackup will make an md5 check
\&    depending on blocks of that file.
.Ve
.IP "\fB\-\-checkBlocksBS0\fR" 8
.IX Item "--checkBlocksBS0"
.Vb 2
\&    Block size for option checkBlocksRule
\&    Default is $checkBlocksBSdefault (1 megabyte)
.Ve
.IP "\fB\-\-checkBlocksCompr0\fR" 8
.IX Item "--checkBlocksCompr0"
.Vb 2
\&    if set, the blocks generated due to this rule are
\&    compressed
.Ve
.IP "\fB\-\-checkBlocksRead0\fR" 8
.IX Item "--checkBlocksRead0"
.Vb 6
\&    Filter for reading the file to treat as a blocked file
\&    eg. \*(Aqgzip \-d\*(Aq if the file is compressed. Default is no
\&    read filter.
\&    This parameter is parsed like the line in the
\&    configuration file and normally has to be quoted,
\&    eg. \*(Aqgzip \-9\*(Aq
.Ve
.IP "\fB\-\-checkBlocksParallel0\fR" 8
.IX Item "--checkBlocksParallel0"
.Vb 3
\&    Read files specified here in parallel to "normal" ones.
\&    This only makes sense if they are on a different disk.
\&    Default value is \*(Aqno\*(Aq
.Ve
.IP "\fB\-\-checkBlocksRule1\fR" 8
.IX Item "--checkBlocksRule1"
.PD 0
.IP "\fB\-\-checkBlocksBS1\fR" 8
.IX Item "--checkBlocksBS1"
.IP "\fB\-\-checkBlocksCompr1\fR" 8
.IX Item "--checkBlocksCompr1"
.IP "\fB\-\-checkBlocksRead1\fR" 8
.IX Item "--checkBlocksRead1"
.IP "\fB\-\-checkBlocksParallel1\fR" 8
.IX Item "--checkBlocksParallel1"
.IP "\fB\-\-checkBlocksRule2\fR" 8
.IX Item "--checkBlocksRule2"
.IP "\fB\-\-checkBlocksBS2\fR" 8
.IX Item "--checkBlocksBS2"
.IP "\fB\-\-checkBlocksCompr2\fR" 8
.IX Item "--checkBlocksCompr2"
.IP "\fB\-\-checkBlocksRead2\fR" 8
.IX Item "--checkBlocksRead2"
.IP "\fB\-\-checkBlocksParallel2\fR" 8
.IX Item "--checkBlocksParallel2"
.IP "\fB\-\-checkBlocksRule3\fR" 8
.IX Item "--checkBlocksRule3"
.IP "\fB\-\-checkBlocksBS3\fR" 8
.IX Item "--checkBlocksBS3"
.IP "\fB\-\-checkBlocksCompr3\fR" 8
.IX Item "--checkBlocksCompr3"
.IP "\fB\-\-checkBlocksRead3\fR" 8
.IX Item "--checkBlocksRead3"
.IP "\fB\-\-checkBlocksParallel3\fR" 8
.IX Item "--checkBlocksParallel3"
.IP "\fB\-\-checkBlocksRule4\fR" 8
.IX Item "--checkBlocksRule4"
.IP "\fB\-\-checkBlocksBS4\fR" 8
.IX Item "--checkBlocksBS4"
.IP "\fB\-\-checkBlocksCompr4\fR" 8
.IX Item "--checkBlocksCompr4"
.IP "\fB\-\-checkBlocksRead4\fR" 8
.IX Item "--checkBlocksRead4"
.IP "\fB\-\-checkBlocksParallel4\fR" 8
.IX Item "--checkBlocksParallel4"
.IP "\fB\-\-checkDevices0\fR" 8
.IX Item "--checkDevices0"
.PD
.Vb 2
\&    List of devices for md5 ckeck depending on blocks of these
\&    devices (eg. /dev/sdb or /dev/sdb1)
.Ve
.IP "\fB\-\-checkDevicesDir0\fR" 8
.IX Item "--checkDevicesDir0"
.Vb 1
\&    Directory where to store the backup of the device
.Ve
.IP "\fB\-\-checkDevicesBS0\fR" 8
.IX Item "--checkDevicesBS0"
.Vb 2
\&    Block size of option checkDevices0,
\&    default is 1M (1 megabyte)
.Ve
.IP "\fB\-\-checkDevicesCompr0\fR" 8
.IX Item "--checkDevicesCompr0"
.Vb 2
\&    Compress blocks resulting from option checkDevices0
\&    possible values are \*(Aqcheck\*(Aq, \*(Aqyes\*(Aq or \*(Aqno\*(Aq, default is \*(Aqno\*(Aq
.Ve
.IP "\fB\-\-checkDevicesParallel0\fR" 8
.IX Item "--checkDevicesParallel0"
.Vb 3
\&    Read devices specified in parallel to the rest of the
\&    backup. This only makes sense if they are on a different
\&    disk. Default value is \*(Aqno\*(Aq
.Ve
.IP "\fB\-\-checkDevices1\fR" 8
.IX Item "--checkDevices1"
.PD 0
.IP "\fB\-\-checkDevicesDir1\fR" 8
.IX Item "--checkDevicesDir1"
.IP "\fB\-\-checkDevicesBS1\fR" 8
.IX Item "--checkDevicesBS1"
.IP "\fB\-\-checkDevicesCompr1\fR" 8
.IX Item "--checkDevicesCompr1"
.IP "\fB\-\-checkDevicesParallel1\fR" 8
.IX Item "--checkDevicesParallel1"
.IP "\fB\-\-checkDevices2\fR" 8
.IX Item "--checkDevices2"
.IP "\fB\-\-checkDevicesDir2\fR" 8
.IX Item "--checkDevicesDir2"
.IP "\fB\-\-checkDevicesBS2\fR" 8
.IX Item "--checkDevicesBS2"
.IP "\fB\-\-checkDevicesCompr2\fR" 8
.IX Item "--checkDevicesCompr2"
.IP "\fB\-\-checkDevicesParallel2\fR" 8
.IX Item "--checkDevicesParallel2"
.IP "\fB\-\-checkDevices3\fR" 8
.IX Item "--checkDevices3"
.IP "\fB\-\-checkDevicesDir3\fR" 8
.IX Item "--checkDevicesDir3"
.IP "\fB\-\-checkDevicesBS3\fR" 8
.IX Item "--checkDevicesBS3"
.IP "\fB\-\-checkDevicesCompr3\fR" 8
.IX Item "--checkDevicesCompr3"
.IP "\fB\-\-checkDevicesParallel3\fR" 8
.IX Item "--checkDevicesParallel3"
.IP "\fB\-\-checkDevices4\fR" 8
.IX Item "--checkDevices4"
.IP "\fB\-\-checkDevicesDir4\fR" 8
.IX Item "--checkDevicesDir4"
.IP "\fB\-\-checkDevicesBS4\fR" 8
.IX Item "--checkDevicesBS4"
.IP "\fB\-\-checkDevicesCompr4\fR" 8
.IX Item "--checkDevicesCompr4"
.IP "\fB\-\-checkDevicesParallel4\fR" 8
.IX Item "--checkDevicesParallel4"
.IP "\fB\-\-saveRAM\fR" 8
.IX Item "--saveRAM"
.PD
.Vb 2
\&    write temporary dbm files in \-\-tmpdir
\&    use this if you do not have enough RAM
.Ve
.IP "\fB\-\-compress\fR, \fB\-c\fR" 8
.IX Item "--compress, -c"
.Vb 4
\&    compress command (with options), default is <bzip2>
\&    This parameter is parsed like the line in the
\&    configuration file and normally has to be quoted,
\&    eg. \*(Aqgzip \-9\*(Aq
.Ve
.IP "\fB\-\-uncompress\fR, \fB\-u\fR" 8
.IX Item "--uncompress, -u"
.Vb 4
\&    uncompress command (with options), default is  <bzip2 \-d>
\&    This parameter is parsed like the line in the
\&    configuration file and normally has to be quoted, eg.
\&    \*(Aqgzip \-d\*(Aq
.Ve
.IP "\fB\-\-postfix\fR, \fB\-p\fR" 8
.IX Item "--postfix, -p"
.Vb 1
\&    postfix to add after compression, default is <.bz2>
.Ve
.IP "\fB\-\-exceptSuffix\fR" 8
.IX Item "--exceptSuffix"
.Vb 8
\&    do not compress files with the following
\&    suffix (uppercase included):
\&    \*(Aq\e.zip\*(Aq, \*(Aq\e.bz2\*(Aq, \*(Aq\e.gz\*(Aq, \*(Aq\e.tgz\*(Aq, \*(Aq\e.jpg\*(Aq, \*(Aq\e.gif\*(Aq,
\&    \*(Aq\e.tiff?\*(Aq, \*(Aq\e.mpeg\*(Aq, \*(Aq\e.mpe?g\*(Aq, \*(Aq\e.mpe?[34]\*(Aq, \*(Aq\e.ogg\*(Aq,
\&    \*(Aq\e.gpg\*(Aq, \*(Aq\e.png\*(Aq, \*(Aq\e.lzma\*(Aq, \*(Aq\e.xz\*(Aq, \*(Aq\e.mov\*(Aq
\&    This option can be repeated multiple times
\&    If you do not want any compression, set this option
\&    to \*(Aq.*\*(Aq
.Ve
.IP "\fB\-\-addExceptSuffix\fR" 8
.IX Item "--addExceptSuffix"
.Vb 1
\&    like \-\-exceptSuffix, but do not replace defaults, add
.Ve
.IP "\fB\-\-compressSuffix\fR" 8
.IX Item "--compressSuffix"
.Vb 5
\&    Like \-\-exceptSuffix, but mentioned files will be
\&    compressed. If you chose this option, then files not
\&    affected be execptSuffix, addExceptSuffix or this Suffixes
\&    will be rated by the rule function COMPRESSION_CHECK wether
\&    to compress or not
.Ve
.IP "\fB\-\-minCompressSize\fR" 8
.IX Item "--minCompressSize"
.Vb 2
\&    Files smaller than this size will never be compressed
\&    but copied
.Ve
.IP "\fB\-\-comprRule\fR" 8
.IX Item "--comprRule"
.Vb 2
\&    alternative to \-\-exceptSuffix, compressSuffix and minCompressSize:
\&    definition of a rule which files will be compressed
.Ve
.IP "\fB\-\-noCompress\fR" 8
.IX Item "--noCompress"
.Vb 2
\&    maximal number of parallel compress operations,
\&    default = choosen automatically
.Ve
.IP "\fB\-\-queueCompress\fR" 8
.IX Item "--queueCompress"
.Vb 2
\&    length of queue to store files before compression,
\&    default = 1000
.Ve
.IP "\fB\-\-noCopy\fR" 8
.IX Item "--noCopy"
.Vb 2
\&    maximal number of parallel copy operations,
\&    default = 1
.Ve
.IP "\fB\-\-queueCopy\fR" 8
.IX Item "--queueCopy"
.Vb 2
\&    length of queue to store files before copying,
\&    default = 1000
.Ve
.IP "\fB\-\-withUserGroupStat\fR" 8
.IX Item "--withUserGroupStat"
.Vb 1
\&    write statistics about used space in log file
.Ve
.IP "\fB\-\-userGroupStatFile\fR" 8
.IX Item "--userGroupStatFile"
.Vb 2
\&    write statistics about used space in name file
\&    will be overridden each time
.Ve
.IP "\fB\-\-doNotCompressMD5File\fR" 8
.IX Item "--doNotCompressMD5File"
.Vb 1
\&    do not compress .md5CheckSumFile
.Ve
.IP "\fB\-\-chmodMD5File\fR" 8
.IX Item "--chmodMD5File"
.Vb 2
\&    permissions of .md5CheckSumFile and corresponding
\&    .storeBackupLinks directory, default is 0600
.Ve
.IP "\fB\-\-verbose\fR, \fB\-v\fR" 8
.IX Item "--verbose, -v"
.Vb 1
\&    verbose messages
.Ve
.IP "\fB\-\-debug\fR, \fB\-d\fR" 8
.IX Item "--debug, -d"
.Vb 3
\&    generate debug messages, levels are 0 (none, default),
\&    1 (some), 2 (many) messages, especially in
\&    \-\-exceptRule and \-\-includeRule
.Ve
.IP "\fB\-\-resetAtime\fR" 8
.IX Item "--resetAtime"
.Vb 3
\&    reset access time in the source directory \- but this will
\&    change ctime (time of last modification of file status
\&    information)
.Ve
.IP "\fB\-\-doNotDelete\fR" 8
.IX Item "--doNotDelete"
.Vb 1
\&    check only, do not delete any backup
.Ve
.IP "\fB\-\-deleteNotFinishedDirs\fR" 8
.IX Item "--deleteNotFinishedDirs"
.Vb 2
\&    delete old backups which have not been finished
\&    this will only happen if doNotDelete is set
.Ve
.IP "\fB\-\-keepAll\fR" 8
.IX Item "--keepAll"
.Vb 6
\&    keep backups which are not older than the specified amount
\&    of time. This is like a default value for all days in
\&    \-\-keepWeekday. Begins deleting at the end of the script
\&    the time range has to be specified in format \*(Aqdhms\*(Aq, e.g.
\&      10d4h means 10 days and 4 hours
\&      default = 20d
.Ve
.IP "\fB\-\-keepWeekday\fR" 8
.IX Item "--keepWeekday"
.Vb 10
\&    keep backups for the specified days for the specified
\&    amount of time. Overwrites the default values choosen in
\&    \-\-keepAll. \*(AqMon,Wed:40d Sat:60d10m\*(Aq means:
\&      keep backups from Mon and Wed 40days + 5mins
\&      keep backups from Sat 60days + 10mins
\&      keep backups from the rest of the days like spcified in
\&      \-\-keepAll (default $keepAll)
\&    if you also use the \*(Aqarchive flag\*(Aq it means to not
\&    delete the affected directories via \-\-keepMaxNumber:
\&      a10d4h means 10 days and 4 hours and \*(Aqarchive flag\*(Aq
\&    e.g. \*(AqMon,Wed:a40d5m Sat:60d10m\*(Aq means:
\&      keep backups from Mon and Wed 40days + 5mins + \*(Aqarchive\*(Aq
\&      keep backups from Sat 60days + 10mins
\&      keep backups from the rest of the days like specified in
\&      \-\-keepAll (default 30d)
.Ve
.IP "\fB\-\-keepFirstOfYear\fR" 8
.IX Item "--keepFirstOfYear"
.Vb 2
\&    do not delete the first backup of a year
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-keepLastOfYear\fR" 8
.IX Item "--keepLastOfYear"
.Vb 2
\&    do not delete the last backup of a year
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-keepFirstOfMonth\fR" 8
.IX Item "--keepFirstOfMonth"
.Vb 2
\&    do not delete the first backup of a month
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-keepLastOfMonth\fR" 8
.IX Item "--keepLastOfMonth"
.Vb 2
\&    do not delete the last backup of a month
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-firstDayOfWeek\fR" 8
.IX Item "--firstDayOfWeek"
.Vb 2
\&    default: \*(AqSun\*(Aq. This value is used for calculating
\&    \-\-keepFirstOfWeek and \-\-keepLastOfWeek
.Ve
.IP "\fB\-\-keepFirstOfWeek\fR" 8
.IX Item "--keepFirstOfWeek"
.Vb 2
\&    do not delete the first backup of a week
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-keepLastOfWeek\fR" 8
.IX Item "--keepLastOfWeek"
.Vb 2
\&    do not delete the last backup of a week
\&    format is timePeriod with possible \*(Aqarchive flag\*(Aq
.Ve
.IP "\fB\-\-keepDuplicate\fR" 8
.IX Item "--keepDuplicate"
.Vb 3
\&    keep multiple backups of one day up to timePeriod
\&    format is timePeriod, \*(Aqarchive flag\*(Aq is not possible
\&    default = 7d
.Ve
.IP "\fB\-\-keepMinNumber\fR" 8
.IX Item "--keepMinNumber"
.Vb 2
\&    Keep that miminum of backups. Multiple backups of one
\&    day are counted as one backup. Default is 10.
.Ve
.IP "\fB\-\-keepMaxNumber\fR" 8
.IX Item "--keepMaxNumber"
.Vb 7
\&    Try to keep only that maximum of backups. If you have more
\&    backups, the following sequence of deleting will happen:
\&    \- delete all duplicates of a day, beginning with the old
\&      once, except the last of every day
\&    \- if this is not enough, delete the rest of the backups
\&      beginning with the oldest, but *never* a backup with
\&      the \*(Aqarchive flag\*(Aq or the last backup
.Ve
.IP "\fB\-\-keepRelative\fR, \fB\-R\fR" 8
.IX Item "--keepRelative, -R"
.Vb 11
\&    Alternative deletion scheme. If you use this option, all
\&    other keep options are ignored. Preserves backups depending
\&    on their *relative* age. Example:
\&    \-R \*(Aq1d 7d 61d 92b\*(Aq
\&    will (try to) ensure that there is always
\&    \- One backup between 1 day and 7 days old
\&    \- One backup between 5 days and 2 months old
\&    \- One backup between ~2 months and ~3 months old
\&    If there is no backup for a specified timespan
\&    (e.g. because the last backup was done more than 2 weeks
\&    ago) the next older backup will be used for this timespan.
.Ve
.IP "\fB\-\-progressReport\fR, \fB\-P\fR" 8
.IX Item "--progressReport, -P"
.Vb 5
\&    print progress report after each \*(Aqnumber\*(Aq files
\&    additional you may add a time frame after which a message is
\&    printed
\&    if you want to print a report each 1000 files and after
\&    one minute and 10 seconds, use: \-P 1000,1m10s
.Ve
.IP "\fB\-\-printDepth\fR, \fB\-D\fR" 8
.IX Item "--printDepth, -D"
.Vb 1
\&    print depth of actual read directory during backup
.Ve
.IP "\fB\-\-ignoreReadError\fR" 8
.IX Item "--ignoreReadError"
.Vb 2
\&    ignore read errors in source directory; not readable
\&    directories do not cause storeBackup.pl to stop processing
.Ve
.IP "\fB\-\-suppressWarning\fR" 8
.IX Item "--suppressWarning"
.Vb 10
\&    suppress (unwanted) warnings in the log files;
\&    to suppress warnings, the following keys can be used:
\&      excDir (suppresses the warning that excluded directories
\&             do not exist)
\&      fileChange (suppresses the warning that a file has changed
\&                 during the backup)
\&      crSeries (suppresses the warning that storeBackup had to
\&               create the \*(Aqdefault\*(Aq series)
\&      hashCollision (suppresses the warning if a possible
\&                    hash collision is detected)
\&     fileNameWithLineFeed (suppresses the warning if a filename
\&                          contains a line feed)
\&     use_DB_File (suppresses the warning that you should install
\&                  perl module DB_File for better perforamnce)
\&     use_MLDBM (suppresses the warning that you should install
\&                perl module MLDBM if you want to use rule functions
\&                MARK_DIR or MARK_DIR_REC together with option saveRAM)
\&     use_IOCompressBzip2 (suppresses the warning that you should
\&                          instal perl module IO::Compress::Bzip2
\&                          for better performance)
\&     noBackupForPeriod (suppresses warning that there are
\&                        no backups for certain periods when using
\&                        option keepRelative)
\&    This option can be repeated multiple times on the command line.
.Ve
.IP "\fB\-\-linkToRecent\fR" 8
.IX Item "--linkToRecent"
.Vb 3
\&    after a successful backup, set a symbolic link to
\&    that backup and delete existing older links with the
\&    same name
.Ve
.IP "\fB\-\-logFile\fR, \fB\-l\fR" 8
.IX Item "--logFile, -l"
.Vb 1
\&    log file (default is STDOUT)
.Ve
.IP "\fB\-\-plusLogStdout\fR" 8
.IX Item "--plusLogStdout"
.Vb 2
\&    if you specify a log file with \-\-logFile you can
\&    additionally print the output to STDOUT with this flag
.Ve
.IP "\fB\-\-suppressTime\fR" 8
.IX Item "--suppressTime"
.Vb 1
\&    suppress output of time in logfile
.Ve
.IP "\fB\-\-maxFilelen\fR, \fB\-m\fR" 8
.IX Item "--maxFilelen, -m"
.Vb 1
\&    maximal length of log file, default = 1e6
.Ve
.IP "\fB\-\-noOfOldFiles\fR, \fB\-n\fR" 8
.IX Item "--noOfOldFiles, -n"
.Vb 1
\&    number of old log files, default = 5
.Ve
.IP "\fB\-\-saveLogs\fR" 8
.IX Item "--saveLogs"
.Vb 2
\&    save log files with date and time instead of deleting the
\&    old (with [\-noOfOldFiles])
.Ve
.IP "\fB\-\-compressWith\fR" 8
.IX Item "--compressWith"
.Vb 4
\&    compress saved log files (e.g. with \*(Aqgzip \-9\*(Aq)
\&    default is \*(Aqbzip2\*(Aq
\&    This parameter is parsed like a line in the configuration
\&    file and normally has to be quoted.
.Ve
.IP "\fB\-\-logInBackupDir\fR" 8
.IX Item "--logInBackupDir"
.Vb 3
\&    write log file (also) in the backup directory
\&    Be aware that this log does not contain all error
\&    messages of the one specified with \-\-logFile!
.Ve
.IP "\fB\-\-compressLogInBackupDir\fR" 8
.IX Item "--compressLogInBackupDir"
.Vb 1
\&    compress the log file in the backup directory
.Ve
.IP "\fB\-\-logInBackupDirFileName\fR" 8
.IX Item "--logInBackupDirFileName"
.Vb 2
\&    filename to use for writing the above log file,
\&    default is .storeBackup.log
.Ve
.IP "\fBotherBackupSeries\fR" 8
.IX Item "otherBackupSeries"
.Vb 10
\&    List of other backup series to consider for
\&    hard linking. Relative path from backupDir!
\&    Format (examples):
\&    backupSeries/2002.08.29_08.25.28 \-> consider this backup
\&    or
\&    0:backupSeries \->last (youngest) in <backupDir>/backupSeries
\&    1:backupSeries \->one before last in <backupDir>/backupSeries
\&    n:backupSeries \->
\&      n\*(Aqth before last in <backupDir>/backupSeries
\&    3\-5:backupSeries \->
\&      3rd, 4th and 5th in <backupDir>/backupSeries
\&    all:backupSeries \-> all in <backupDir>/backupSeries
\&    You can also use wildcards in series names. See documentation,
\&    section \*(AqUsing Wildcards for Replication\*(Aq for details.
\&    Default is to link to the last backup in every series
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000\-2014 by Heinz-Josef Claes (see \s-1README\s0).
Published under the \s-1GNU\s0 General Public License, either version 3
of the License, or (at your option) any later version.
